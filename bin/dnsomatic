#!/usr/bin/ruby

begin
  require 'dnsomatic'
rescue LoadError => e
  # a small hack in the case we aren't a gem
  $: << File.join(File.dirname($0), '..', 'lib')
  retry
end

begin
  opts = DNSOMatic::Opts.instance
  opts.parse(ARGV)

  c = DNSOMatic::Config.new(opts.cf)

  if opts.showcf
    msg = "This is your configuration after merging in the defaults.\n"
    msg += "It has been pruned to only display the stanza named: #{opts.name}" if opts.name
    msg += c.merged_config(opts.name)
    DNSOMatic::Logger.log(msg)
    exit
  end

  DNSOMatic::Logger.log("Will only update #{opts.name}.") if opts.stanza

  updaters = c.updaters(opts.name)

  updaters.each_pair do |name, obj|
    DNSOMatic::Logger.log("Working with host update definition: #{name}")
    if opts.print
      DNSOMatic::Logger.warn(obj.to_s)
    else
      obj.send( opts.force ? 'update!' : 'update')
    end
  end
rescue SystemExit => e
  # we call this in a few places (mainly from option processing [-h, -V])
  # a no-op for us.
rescue Exception => e
  if e.kind_of?(DNSOMatic::Error)
    msg = e.message
  else
    msg = "Rescued an unhandled exception of type: #{e.class}\n"
    msg += e.message + "\n"
  end


  if opts.debug
    msg += "Backtrace:\n"
    msg += e.backtrace.to_s
  else
    msg += "If you want to see where this error was generated, use -x"
  end
  DNSOMatic::Logger.warn(msg)
  exit 1
end
